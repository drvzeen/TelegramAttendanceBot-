import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from docx import Document
import math
import os
import json

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
TOKEN = os.getenv("TOKEN")
UNIVERSITY_CENTER = (41.351376, 69.221844)
ALLOWED_RADIUS = 100

USERS_FILE = "users.json"
ATTENDANCE_FILE = "attendance.json"

# USERS: username -> {"name": –§–ò–û, "role": "student"/"leader"}
USERS = {}
attendance = {}

logging.basicConfig(level=logging.INFO)

# ================== –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò ==================
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤."""
    global USERS, attendance
    try:
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, "r") as f:
                USERS = json.load(f)
        if os.path.exists(ATTENDANCE_FILE):
            with open(ATTENDANCE_FILE, "r") as f:
                attendance = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        pass

def save_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –≤ JSON-—Ñ–∞–π–ª—ã."""
    with open(USERS_FILE, "w") as f:
        json.dump(USERS, f, indent=4)
    with open(ATTENDANCE_FILE, "w") as f:
        json.dump(attendance, f, indent=4)

def distance(coord1, coord2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏."""
    R = 6371000
    lat1, lon1 = map(math.radians, coord1)
    lat2, lon2 = map(math.radians, coord2)
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

def is_leader(username):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–¥–µ—Ä–æ–º."""
    return username in USERS and USERS[username]["role"] == "leader"

def is_student(username):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º."""
    return username in USERS and USERS[username]["role"] == "student"

# ================== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ë–û–¢–ê ==================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."""
    user = update.message.from_user
    username = user.username
    
    if username is None or not is_student(username):
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            f"–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å @username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å."
        )
        return
    
    keyboard = [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        f"–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    
    await update.message.reply_text(
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É:",
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    username = update.message.from_user.username
    if username is None:
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ @username.")
    
    text = "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö:\n/start - –Ω–∞—á–∞—Ç—å\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    if is_leader(username):
        text += "\n\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–∏–¥–µ—Ä–∞:\n/report - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç\n/add_student <username> <–§–ò–û> <role> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/list_students - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫"
    elif is_student(username):
        text += "\n\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:\n/status - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å"
    await update.message.reply_text(text)

async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    username = update.message.from_user.username
    if username is None or not is_student(username):
        return await update.message.reply_text(
            "–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç @username.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    loc = update.message.location
    user_coords = (loc.latitude, loc.longitude)
    dist = distance(user_coords, UNIVERSITY_CENTER)
    
    today = datetime.now().strftime("%Y-%m-%d")
    if today not in attendance:
        attendance[today] = {}
    
    name = USERS[username]["name"]
    
    if dist <= ALLOWED_RADIUS:
        attendance[today][name] = "+"
        await update.message.reply_text("–¢—ã –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    else:
        attendance[today][name] = "-"
        await update.message.reply_text("–¢—ã –Ω–µ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ ‚ùå", reply_markup=ReplyKeyboardRemove())
    
    save_data()

# ================== –õ–ò–î–ï–†–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ==================

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx."""
    username = update.message.from_user.username
    if not is_leader(username):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ç—á—ë—Ç.")
        
    today = datetime.now().strftime("%Y-%m-%d")
    if today not in attendance:
        return await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        
    doc = Document()
    doc.add_heading(f"–û—Ç—á—ë—Ç –∑–∞ {today}", 0)
    for user_data in USERS.values():
        if user_data["role"] == "student":
            status = attendance[today].get(user_data["name"], "–ù–µ –æ—Ç–º–µ—á–µ–Ω")
            doc.add_paragraph(f"{user_data['name']}: {status}")
            
    filename = f"attendance_{today}.docx"
    doc.save(filename)
    
    await update.message.reply_document(open(filename, "rb"))
    os.remove(filename)

async def add_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–ª–∏ –ª–∏–¥–µ—Ä–∞)."""
    username = update.message.from_user.username
    if username is None:
        return await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ @username.")

    if not is_leader(username) and len(USERS) > 0:
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    
    try:
        args = context.args
        if len(args) < 3:
            return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /add_student <username> <–§–ò–û> <role>")
            
        new_username = args[0]
        name = " ".join(args[1:-1]) 
        role = args[-1].lower()
        
        if role not in ["student", "leader"]:
            return await update.message.reply_text("–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å student –∏–ª–∏ leader")
            
        USERS[new_username] = {"name": name, "role": role}
        save_data()
        await update.message.reply_text(f"{name} ({role}) –¥–æ–±–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def list_students(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    username = update.message.from_user.username
    if not is_leader(username):
        return await update.message.reply_text("–¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫.")
        
    if not USERS:
        return await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        
    text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for u, data in USERS.items():
        text += f"@{u}: {data['name']} ({data['role']})\n"
        
    await update.message.reply_text(text)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏."""
    username = update.message.from_user.username
    if username is None or not is_student(username):
        return await update.message.reply_text("–¢—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç @username.")
        
    today = datetime.now().strftime("%Y-%m-%d")
    name = USERS[username]["name"]
    status_today = attendance.get(today, {}).get(name, "–ù–µ –æ—Ç–º–µ—á–µ–Ω")
    
    await update.message.reply_text(f"{name}, —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å —Å–µ–≥–æ–¥–Ω—è: {status_today}")

# ================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==================
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if TOKEN is None:
        logging.error("Telegram bot token not found. Set the 'TOKEN' environment variable.")
        return
        
    load_data()
    
    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("add_student", add_student))
    app.add_handler(CommandHandler("list_students", list_students))
    app.add_handler(CommandHandler("status", status))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏)
    app.add_handler(MessageHandler(filters.LOCATION, location_handler))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    app.run_polling()

if __name__ == "__main__":
    main()
